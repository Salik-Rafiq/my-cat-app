{"version":3,"sources":["utilities/useToggle.js","config.js","app/services/CatApiService.js","components/UploadModal.jsx","assets/spinner.gif","components/CatImage.jsx","features/votecount/VoteCountSlice.js","components/VoteButtons.jsx","features/votecount/VoteCount.jsx","tabs/VoteTab.jsx","tabs/SearchTab.jsx","App.jsx","reportWebVitals.js","app/store.js","index.jsx"],"names":["useToggle","initialState","useState","state","setstate","toggle","useCallback","Configuration","CATAPI_BASE","CATAPI_KEY","subID","axios","defaults","headers","common","CatApiService","limit","page","order","breedId","requestURL","get","id","vote","voteData","image_id","value","sub_id","post","imageFile","formData","FormData","append","uploadFile","file","a","uploadCatImage","UploadModal","isOpen","onClose","setFile","statusCode","setStatusCode","statusMessage","setStatusMessage","isUploading","setIsUploading","fileRef","useRef","messageAlert","Alert","variant","dismissible","Modal","show","onHide","onShow","current","backdrop","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","ref","onChange","e","target","files","disabled","Footer","Button","onClick","then","response","status","catch","error","message","finally","Spinner","animation","role","className","size","CatImage","url","dimensions","isLoading","setIsLoading","useEffect","style","height","cy","width","cx","Image","src","display","maxHeight","maxWidth","cursor","border","boxShadow","onLoad","loadVotes","createAsyncThunk","data","VoteCountReducer","createSlice","name","votes","reducers","registerVote","action","newVote","payload","existingCatVote","find","push","extraReducers","builder","addCase","fulfilled","actions","VoteButtons","onClicked","onSuccess","voted","setVoted","dispatch","useDispatch","sendVote","sendCatVote","alert","VoteCount","catId","catVotes","useSelector","console","log","elem","getCatVoteById","voteCount","VoteTab","theCat","setTheCat","loadKitty","getSingleCat","result","nextKitty","Row","Col","loadBreeds","getBreeds","map","loadSearch","searchCats","SearchTab","breeds","setBreeds","breedRef","lastSearch","setLastSearch","searchCount","setSearchCount","doSearch","length","gridData","currRow","i","breedsOptions","Select","Text","item","reduce","x","y","App","open","close","Container","Tabs","mountOnEnter","Tab","eventKey","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.56ddc8c7.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst useToggle = (initialState = false) => {\n    const [state, setstate] = useState(initialState);\n\n    const toggle = useCallback(() => setstate(state => !state), []);\n\n    return [state, toggle, toggle];\n}\n\nexport default useToggle;","const Configuration = {\n    CATAPI_BASE: 'https://api.thecatapi.com/v1/',\n    CATAPI_KEY: '468603ca-3623-444c-8d4b-a569132d620c',\n    subID: 'SalikRaf-101',\n}\n\nexport default Configuration;","import Configuration from '../../config';\nimport axios from 'axios';\n\naxios.defaults.headers.common['x-api-key'] = Configuration.CATAPI_KEY;\n\nclass CatApiService {\n\n    static async searchCats({ limit = 9, page = 0, order = 'asc', breedId = \"\" } = {}) {\n\n        const requestURL = `${Configuration.CATAPI_BASE}images/search/?limit=${limit}&page=${page}&order=${order}&breed_id=${breedId}`;\n        return axios.get(requestURL);\n    }\n\n    static async getSingleCat() {\n        const requestURL = `${Configuration.CATAPI_BASE}images/search/`;\n        return axios.get(requestURL);\n    }\n\n    static async sendCatVote(id, vote) {\n        const voteData = {\n            image_id: id,\n            value: vote,\n            sub_id: Configuration.subID\n        }\n        const requestURL = `${Configuration.CATAPI_BASE}votes`;\n        return axios.post(requestURL, voteData);\n    }\n\n    static async uploadCatImage(imageFile) {\n        const formData = new FormData();\n        formData.append('file', imageFile);\n        const requestURL = `${Configuration.CATAPI_BASE}images/upload`;\n        return axios.post(requestURL, formData, {\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        });\n    }\n\n    static async getBreeds() {\n        const requestURL = `${Configuration.CATAPI_BASE}breeds`;\n        return axios.get(requestURL);\n    }\n\n    static async loadVotes() {\n        const requestURL = `${Configuration.CATAPI_BASE}votes?limit=5000`;\n        return axios.get(requestURL);\n    }\n}\n\nexport default CatApiService;","import React, { useState } from 'react';\nimport { useRef } from 'react';\nimport { Button, Form, Modal, Alert, Spinner } from 'react-bootstrap';\nimport CatApiService from '../app/services/CatApiService';\n\nconst uploadFile = async (file) => {\n    return CatApiService.uploadCatImage(file);\n}\n\nconst UploadModal = ({ isOpen, onClose }) => {\n    const [file, setFile] = useState();\n    const [statusCode, setStatusCode] = useState();\n    const [statusMessage, setStatusMessage] = useState();\n    const [isUploading, setIsUploading] = useState(false);\n    const fileRef = useRef();\n    /*let showSpinner = false;\n    useEffect(() => {\n        showSpinner = isUploading;\n    }, [isUploading]);\n*/\n    const onUploadClick = () => {\n        if (!file === 0) {\n            setStatusCode(1000);\n            setStatusMessage(\"No file specified. Please select a file to upload.\")\n            return;\n        }\n        setStatusCode(null);\n        setStatusMessage(null);\n        setIsUploading(true);\n        uploadFile(fileRef.current.files[0])\n            .then(response => {\n                /* Check result. If 400 than it's not a cat! put up message! */\n                if (response.status === 201) {\n                    setStatusMessage(\"Successfull upload of a cat image!\")\n                }\n                setStatusCode(response.status);\n            })\n            .catch(error => {\n                setStatusCode(error.response.status);\n                if (error.response.status === 400) {\n                    setStatusMessage(\"Unsuccessfull. Image is either too large or isn't a cat!\");\n                } else {\n                    setStatusMessage(`Server Error: ${error.message}`);\n                }\n            })\n            .finally(() => {\n                setFile(null);\n                fileRef.current.value = '';\n                setIsUploading(false);\n            });\n        //onClose();\n    }\n    const onFileChange = (e) => {\n        setFile(e.target.files[0]);\n    }\n\n    const onCloseAlert = () => {\n        setStatusCode(null);\n        setStatusMessage(null);\n    }\n\n    const onOpening = () => {\n        fileRef.current.value = null;\n        setStatusCode(null);\n        setStatusMessage(null);\n        setIsUploading(false);\n    }\n\n    let messageAlert = null;\n    if (statusMessage && statusCode) {\n        const variant = () => {\n            switch (statusCode) {\n                case 201: return 'success';\n                case 400: return 'info';\n                case 500: return 'danger';\n                default: return 'dark'\n            }\n        }\n        messageAlert = <Alert key=\"messageAlert\" variant={variant()} dismissible onClose={onCloseAlert}>\n            {statusMessage}\n        </Alert>\n    }\n\n    return (\n        <Modal show={isOpen} onHide={onClose} onShow={onOpening} backdrop={isUploading ? 'static' : true} >\n            <Modal.Header closeButton={!isUploading}>\n                <Modal.Title>Upload Cat Image</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {messageAlert}\n                <Form>\n                    <Form.Group controlId=\"catImageFile\">\n                        <Form.Label>Specific a cat image. It will be scanned and if a cat will be added.</Form.Label>\n                        <Form.Control type=\"file\" ref={fileRef} onChange={onFileChange} disabled={isUploading} />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onClose} disabled={isUploading}>Cancel</Button>\n                <Button variant=\"primary\" onClick={onUploadClick} disabled={!file}>\n                    {isUploading ? (<Spinner animation=\"border\" role=\"uploading\" className=\"mr-2\" size=\"sm\" />) : null}\n                    Upload</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default UploadModal;","export default __webpack_public_path__ + \"static/media/spinner.72e5fa5c.gif\";","import React, { useEffect, useState } from 'react';\nimport { Image } from 'react-bootstrap';\nimport Spinner from '../assets/spinner.gif';\n\nconst CatImage = ({ id, url, dimensions, onClick }) => {\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        setIsLoading(true);\n    }, [url]);\n\n    const onLoad = () => {\n        setIsLoading(false);\n    }\n\n    return (\n        <div key={id} className=\"d-block mx-auto\" style={{ height: dimensions.cy, width: dimensions.cx }}>\n            <Image src={Spinner} style={{ display: !isLoading ? \"none\" : \"block\" }} className=\"mx-auto mt-auto mb-auto\" />\n            <Image src={url} className=\"mx-auto mt-auto mb-auto\" style={{\n                display: isLoading ? \"none\" : \"block\",\n                maxHeight: dimensions.cy, maxWidth: dimensions.cx, cursor: \"pointer\", border: \"solid 1px #CDCDCD\",\n                boxShadow: \"5px 5px 5px #1a1a1a\"\n            }} onLoad={onLoad} onClick={onClick} />\n        </div>\n\n    )\n}\n\nexport default CatImage;","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport CatApiService from \"../../app/services/CatApiService\";\n\nexport const loadVotes = createAsyncThunk('votes/loadVotes', async () => {\n    const response = await CatApiService.loadVotes();\n    return response.data;\n});\n\nexport const getCatVoteById = (state, catId) => {\n    console.log(state);\n    const vote = state.votes.find(elem => elem.image_id === catId);\n    return vote ? vote.value : null;\n}\n\nconst initialState = {\n    status: 'empty',\n    votes: []\n}\nconst VoteCountReducer = createSlice({\n    name: 'vote counts',\n    initialState,\n    reducers: {\n        registerVote(state, action) {\n            const newVote = action.payload;\n            const existingCatVote = state.votes.find(vote => vote.image_id === newVote.image_id);\n            if (existingCatVote) {\n                existingCatVote.value += newVote.value;\n            } else {\n                state.votes.push(newVote);\n            }\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(loadVotes.fulfilled, (state, action) => {\n            state.status = 'loaded';\n            state.votes = action.payload;\n        })\n    }\n});\n\nexport const { registerVote } = VoteCountReducer.actions;\nexport { initialState };\nexport default VoteCountReducer.reducer;","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { HandThumbsUpFill, HandThumbsDownFill } from 'react-bootstrap-icons';\nimport { useDispatch } from 'react-redux';\nimport CatApiService from '../app/services/CatApiService';\nimport { registerVote } from '../features/votecount/VoteCountSlice';\n\nconst VoteButtons = ({ id, onClicked = null, onSuccess = null }) => {\n    const [voted, setVoted] = useState(false);\n    const dispatch = useDispatch();\n\n    const sendVote = async (vote) => {\n        if (onClicked) {\n            onClicked();  //usually async so loads next one\n        }\n        try {\n            setVoted(true);\n            await CatApiService.sendCatVote(id, vote);\n            /* register this vote with the Redux */\n            dispatch(registerVote({ \"image_id\": id, \"value\": vote }));\n            if (onSuccess) {\n                onSuccess();\n            }\n        } catch {\n            alert(\"An error occured while voting. Try again\");\n        }\n        finally {\n            setVoted(false);\n        }\n    }\n\n    return (\n        <>\n            <Button variant=\"success\" disabled={voted} onClick={() => sendVote(1)}\n            >Vote Up&nbsp;<HandThumbsUpFill /></Button>&nbsp;\n            <Button disabled={voted} variant=\"danger\" onClick={() => sendVote(0)}>\n                <HandThumbsDownFill />&nbsp;Vote Down</Button>\n        </>\n    )\n}\n\nexport default VoteButtons;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getCatVoteById } from './VoteCountSlice';\n\nconst VoteCount = ({ catId }) => {\n    const catVotes = useSelector(state => getCatVoteById(state.voteCount, catId));\n\n    return (<p>Votes: {catVotes ? catVotes : '--'}</p>);\n}\n\nexport default VoteCount;","import React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport CatApiService from '../app/services/CatApiService';\nimport CatImage from '../components/CatImage';\nimport VoteButtons from '../components/VoteButtons';\nimport { useDispatch } from 'react-redux';\nimport { loadVotes } from '../features/votecount/VoteCountSlice';\nimport VoteCount from '../features/votecount/VoteCount';\n\nconst VoteTab = () => {\n    const [theCat, setTheCat] = useState({ url: '' });\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(loadVotes());\n    }, [dispatch]);\n\n    function loadKitty() {\n        CatApiService.getSingleCat().then((result) => {\n            setTheCat(result.data[0]);\n        })\n    }\n\n    useEffect(() => {\n        loadKitty();\n    }, []);\n\n    function nextKitty() {\n        loadKitty();\n    }\n\n\n    return (\n        <>\n            <Row>\n                <Col className=\"align-self-center mt-2\">\n                    <CatImage id={theCat.id} url={theCat.url} onClick={nextKitty} dimensions={{ cx: \"500px\", cy: \"500px\" }} />\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <VoteCount catId={theCat.id} />\n                </Col>\n            </Row>\n            <Row className=\"mt-3\">\n                <Col>\n                    <VoteButtons id={theCat.id} onClicked={nextKitty} />\n                </Col>\n            </Row>\n            <Row >\n                <h2>Click on the image to select a random next image</h2>\n            </Row>\n        </>\n    );\n}\n\nexport default VoteTab;","import React, { useState, useEffect, useRef } from \"react\";\nimport { Form, Row, Image } from \"react-bootstrap\";\nimport CatApiService from \"../app/services/CatApiService\";\nimport CatImage from \"../components/CatImage\";\nimport Spinner from '../assets/spinner.gif';\n\nconst loadBreeds = async () => {\n    const result = await CatApiService.getBreeds();\n    const data = result.data.map((elem) => {\n        return {\n            id: elem.id,\n            name: elem.name\n        }\n    });\n    return data;\n}\n\nconst loadSearch = async (breedId) => {\n    const ord = \"rand\"; //breedId === \"\" ? \"rand\" : \"asc\";\n    const result = await CatApiService.searchCats({ breedId: breedId, order: ord });\n    const data = result.data.map((elem) => {\n        return {\n            id: elem.id,\n            url: elem.url\n        }\n    });\n    return data;\n}\n\nconst SearchTab = () => {\n    const [breeds, setBreeds] = useState([]);\n    const breedRef = useRef();\n    const [lastSearch, setLastSearch] = useState([]);\n    const [searchCount, setSearchCount] = useState(0);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        loadBreeds()\n            .then((data) => setBreeds(data))\n            .then(() => doSearch(breedRef.current.value));\n    }, []);\n\n    const doSearch = async () => {\n        setIsLoading(true);\n        loadSearch(breedRef.current.value)\n            .then((data) => {\n                setSearchCount(data.length);\n                /* organise the data into nested array here will make it easier to render */\n                let gridData = [];\n                let currRow = [];\n                for (let i = 0; i < data.length; i++) {\n                    if (i % 3 === 0 && i !== 0) {\n                        gridData.push(currRow);\n                        currRow = [];\n                    }\n                    currRow.push(data[i]);\n                }\n                /* push the last row on */\n                if (currRow.length > 0) {\n                    gridData.push(currRow);\n                }\n                setLastSearch(gridData)\n                setIsLoading(false);\n            });\n    }\n\n    const breedsOptions = breeds.map((elem) => {\n        return (<option key={elem.id} value={elem.id}>{elem.name}</option>)\n    });\n\n    const breedChanged = () => {\n        doSearch()\n    }\n\n    return (\n        <>\n            <Row>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Breed</Form.Label>\n                        <Form.Select ref={breedRef} onChange={breedChanged}>\n                            <option value=\"\">All</option>\n                            {breedsOptions}\n                        </Form.Select>\n                        <Form.Text>Change selection to see a specific breed</Form.Text>\n                    </Form.Group>\n                </Form>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n                <Image src={Spinner} style={{ display: isLoading ? \"block\" : \"none\", height: \"125px\", width: \"125px\" }} />\n                <table className=\"table\" style={{ width: \"auto\", display: !isLoading ? \"block\" : \"none\" }}>\n                    <tbody>\n                        {lastSearch.map((elem) => {\n                            return (\n                                <tr key={elem.reduce((x, y) => x.id + y.id, \"\")}>{\n                                    elem.map((item) => {\n                                        return (\n                                            <td key={item.id}>\n                                                <CatImage id={item.id} url={item.url} dimensions={{ cx: \"150px\", cy: \"150px\" }} />\n                                            </td>\n                                        )\n                                    })\n                                }\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n                <div>\n                    <p>Total: {searchCount}</p>\n                </div>\n            </Row>\n        </>\n    )\n}\n\nexport default SearchTab;","import './App.scss';\nimport { Container, Row, Col, Button, Tabs, Tab } from 'react-bootstrap';\nimport useToggle from './utilities/useToggle';\n\nimport UploadModal from './components/UploadModal';\nimport VoteTab from './tabs/VoteTab';\nimport SearchTab from './tabs/SearchTab';\n\nfunction App() {\n  const [isOpen, open, close] = useToggle(false);\n\n  return (\n    <Container className=\"App text-center\">\n      <Row >\n        <Col className=\"align-self-center\"><h2>This is a work in progress.</h2></Col>\n      </Row>\n      <Row>\n        <Tabs mountOnEnter={true}>\n          <Tab eventKey=\"vote\" title=\"Vote\">\n            <VoteTab />\n          </Tab>\n          <Tab eventKey=\"search\" title=\"Search\">\n            <SearchTab />\n          </Tab>\n        </Tabs>\n      </Row>\n      <Row className='justify-content-md-center'>\n        <hr />\n        <Col>\n          <Button onClick={open}>Upload a Image</Button>\n        </Col>\n        <UploadModal isOpen={isOpen} onClose={close} />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n\n/*\n<div onClick={nextKitty} style={{ height: \"500px\", width: \"500px\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n<img src='/spinner.gif' style={{ display: !isLoading ? \"none\" : \"block\", margin: \"auto\" }} />\n<img src={theCat.url} style={{\n  display: isLoading ? \"none\" : \"block\",\n  maxHeight: \"500px\", maxWidth: \"500px\", cursor: \"pointer\", border: \"solid 1px #CDCDCD\",\n  boxShadow: \"5px 5px 5px #1a1a1a\",\n  marginLeft: \"auto\", marginRight: \"auto\"\n}} onLoad={() => { setIsLoading(false) }} />\n</div>\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport VoteCountReducer from '../features/votecount/VoteCountSlice'\n\nexport default configureStore({\n    reducer: {\n        voteCount: VoteCountReducer\n    }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}