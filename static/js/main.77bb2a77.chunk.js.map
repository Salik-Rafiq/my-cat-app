{"version":3,"sources":["utilities/useToggle.js","config.js","app/services/CatApiService.js","components/UploadModal.jsx","assets/spinner.gif","components/CatImage.jsx","components/VoteButtons.jsx","tabs/VoteTab.jsx","tabs/SearchTab.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["useToggle","initialState","useState","state","setstate","toggle","useCallback","Configuration","CATAPI_BASE","CATAPI_KEY","subID","axios","defaults","headers","common","CatApiService","limit","page","order","breedId","requestURL","get","id","vote","voteData","image_id","value","sub_id","post","imageFile","formData","FormData","append","uploadFile","file","a","uploadCatImage","UploadModal","isOpen","onClose","setFile","statusCode","setStatusCode","statusMessage","setStatusMessage","isUploading","setIsUploading","fileRef","useRef","messageAlert","Alert","variant","dismissible","Modal","show","onHide","onShow","current","backdrop","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","type","ref","onChange","e","target","files","disabled","Footer","Button","onClick","then","response","status","catch","error","message","finally","Spinner","animation","role","className","size","CatImage","url","dimensions","isLoading","setIsLoading","useEffect","style","height","cy","width","cx","Image","src","display","maxHeight","maxWidth","cursor","border","boxShadow","onLoad","VoteButtons","onSuccess","voted","setVoted","sendVote","sendCatVote","alert","VoteTab","theCat","setTheCat","loadKitty","getSingleCat","result","data","nextKitty","Row","Col","loadBreeds","getBreeds","map","elem","name","loadSearch","searchCats","SearchTab","breeds","setBreeds","breedRef","lastSearch","setLastSearch","searchCount","setSearchCount","doSearch","length","gridData","currRow","i","push","breedsOptions","Select","Text","item","reduce","x","y","App","open","close","Container","Tabs","mountOnEnter","Tab","eventKey","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77bb2a77.chunk.js","sourcesContent":["import { useCallback, useState } from 'react';\n\nconst useToggle = (initialState = false) => {\n    const [state, setstate] = useState(initialState);\n\n    const toggle = useCallback(() => setstate(state => !state), []);\n\n    return [state, toggle, toggle];\n}\n\nexport default useToggle;","const Configuration = {\n    CATAPI_BASE: 'https://api.thecatapi.com/v1/',\n    CATAPI_KEY: '468603ca-3623-444c-8d4b-a569132d620c',\n    subID: 'SalikRaf-101',\n}\n\nexport default Configuration;","import Configuration from '../../config';\nimport axios from 'axios';\n\naxios.defaults.headers.common['x-api-key'] = Configuration.CATAPI_KEY;\n\nclass CatApiService {\n\n    static async searchCats({ limit = 9, page = 0, order = 'asc', breedId = \"\" } = {}) {\n\n        const requestURL = `${Configuration.CATAPI_BASE}images/search/?limit=${limit}&page=${page}&order=${order}&breed_id=${breedId}`;\n        return axios.get(requestURL);\n    }\n\n    static async getSingleCat() {\n        const requestURL = `${Configuration.CATAPI_BASE}images/search/`;\n        return axios.get(requestURL);\n    }\n\n    static async sendCatVote(id, vote) {\n        const voteData = {\n            image_id: id,\n            value: vote,\n            sub_id: Configuration.subID\n        }\n        const requestURL = `${Configuration.CATAPI_BASE}votes`;\n        return axios.post(requestURL, voteData);\n    }\n\n    static async uploadCatImage(imageFile) {\n        const formData = new FormData();\n        formData.append('file', imageFile);\n        const requestURL = `${Configuration.CATAPI_BASE}images/upload`;\n        return axios.post(requestURL, formData, {\n            headers: {\n                'content-type': 'multipart/form-data'\n            }\n        });\n    }\n\n    static async getBreeds() {\n        const requestURL = `${Configuration.CATAPI_BASE}breeds`;\n        return axios.get(requestURL);\n    }\n\n}\n\nexport default CatApiService;","import React, { useState } from 'react';\nimport { useRef } from 'react';\nimport { Button, Form, Modal, Alert, Spinner } from 'react-bootstrap';\nimport CatApiService from '../app/services/CatApiService';\n\nconst uploadFile = async (file) => {\n    return CatApiService.uploadCatImage(file);\n}\n\nconst UploadModal = ({ isOpen, onClose }) => {\n    const [file, setFile] = useState();\n    const [statusCode, setStatusCode] = useState();\n    const [statusMessage, setStatusMessage] = useState();\n    const [isUploading, setIsUploading] = useState(false);\n    const fileRef = useRef();\n    /*let showSpinner = false;\n    useEffect(() => {\n        showSpinner = isUploading;\n    }, [isUploading]);\n*/\n    const onUploadClick = () => {\n        if (!file === 0) {\n            setStatusCode(1000);\n            setStatusMessage(\"No file specified. Please select a file to upload.\")\n            return;\n        }\n        setStatusCode(null);\n        setStatusMessage(null);\n        setIsUploading(true);\n        uploadFile(fileRef.current.files[0])\n            .then(response => {\n                /* Check result. If 400 than it's not a cat! put up message! */\n                if (response.status === 201) {\n                    setStatusMessage(\"Successfull upload of a cat image!\")\n                }\n                setStatusCode(response.status);\n            })\n            .catch(error => {\n                setStatusCode(error.response.status);\n                if (error.response.status === 400) {\n                    setStatusMessage(\"Unsuccessfull. Image is either too large or isn't a cat!\");\n                } else {\n                    setStatusMessage(`Server Error: ${error.message}`);\n                }\n            })\n            .finally(() => {\n                setFile(null);\n                fileRef.current.value = '';\n                setIsUploading(false);\n            });\n        //onClose();\n    }\n    const onFileChange = (e) => {\n        setFile(e.target.files[0]);\n    }\n\n    const onCloseAlert = () => {\n        setStatusCode(null);\n        setStatusMessage(null);\n    }\n\n    const onOpening = () => {\n        fileRef.current.value = null;\n        setStatusCode(null);\n        setStatusMessage(null);\n        setIsUploading(false);\n    }\n\n    let messageAlert = null;\n    if (statusMessage && statusCode) {\n        const variant = () => {\n            switch (statusCode) {\n                case 201: return 'success';\n                case 400: return 'info';\n                case 500: return 'danger';\n                default: return 'dark'\n            }\n        }\n        messageAlert = <Alert key=\"messageAlert\" variant={variant()} dismissible onClose={onCloseAlert}>\n            {statusMessage}\n        </Alert>\n    }\n\n    return (\n        <Modal show={isOpen} onHide={onClose} onShow={onOpening} backdrop={isUploading ? 'static' : true} >\n            <Modal.Header closeButton={!isUploading}>\n                <Modal.Title>Upload Cat Image</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {messageAlert}\n                <Form>\n                    <Form.Group controlId=\"catImageFile\">\n                        <Form.Label>Specific a cat image. It will be scanned and if a cat will be added.</Form.Label>\n                        <Form.Control type=\"file\" ref={fileRef} onChange={onFileChange} disabled={isUploading} />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={onClose} disabled={isUploading}>Cancel</Button>\n                <Button variant=\"primary\" onClick={onUploadClick} disabled={!file}>\n                    {isUploading ? (<Spinner animation=\"border\" role=\"uploading\" className=\"mr-2\" size=\"sm\" />) : null}\n                    Upload</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default UploadModal;","export default __webpack_public_path__ + \"static/media/spinner.72e5fa5c.gif\";","import React, { useEffect, useState } from 'react';\nimport { Image } from 'react-bootstrap';\nimport Spinner from '../assets/spinner.gif';\n\nconst CatImage = ({ id, url, dimensions, onClick }) => {\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        setIsLoading(true);\n    }, [url]);\n\n    const onLoad = () => {\n        setIsLoading(false);\n    }\n\n    return (\n        <div key={id} className=\"d-block mx-auto\" style={{ height: dimensions.cy, width: dimensions.cx }}>\n            <Image src={Spinner} style={{ display: !isLoading ? \"none\" : \"block\" }} className=\"mx-auto mt-auto mb-auto\" />\n            <Image src={url} className=\"mx-auto mt-auto mb-auto\" style={{\n                display: isLoading ? \"none\" : \"block\",\n                maxHeight: dimensions.cy, maxWidth: dimensions.cx, cursor: \"pointer\", border: \"solid 1px #CDCDCD\",\n                boxShadow: \"5px 5px 5px #1a1a1a\"\n            }} onLoad={onLoad} onClick={onClick} />\n        </div>\n\n    )\n}\n\nexport default CatImage;","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { HandThumbsUpFill, HandThumbsDownFill } from 'react-bootstrap-icons';\nimport CatApiService from '../app/services/CatApiService';\n\nconst VoteButtons = ({ id, onSuccess }) => {\n    const [voted, setVoted] = useState(false);\n\n    const sendVote = async (vote) => {\n        try {\n            setVoted(true);\n            await CatApiService.sendCatVote(id, vote);\n            if (onSuccess) {\n                onSuccess();\n            }\n        } catch {\n            alert(\"An error occured while voting. Try again\");\n        }\n        finally {\n            setVoted(false);\n        }\n    }\n\n    return (\n        <>\n            <Button variant=\"success\" disabled={voted} onClick={() => sendVote(1)}\n            >Vote Up&nbsp;<HandThumbsUpFill /></Button>&nbsp;\n            <Button disabled={voted} variant=\"danger\" onClick={() => sendVote(0)}>\n                <HandThumbsDownFill />&nbsp;Vote Down</Button>\n        </>\n    )\n}\n\nexport default VoteButtons;","import React, { useState, useEffect } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport CatApiService from '../app/services/CatApiService';\nimport CatImage from '../components/CatImage';\nimport VoteButtons from '../components/VoteButtons';\n\nconst VoteTab = () => {\n    const [theCat, setTheCat] = useState({ url: '' });\n\n    function loadKitty() {\n        CatApiService.getSingleCat().then((result) => {\n            setTheCat(result.data[0]);\n        })\n    }\n\n    useEffect(() => {\n        loadKitty();\n    }, []);\n\n    function nextKitty() {\n        loadKitty();\n    }\n\n\n    return (\n        <>\n            <Row>\n                <Col className=\"align-self-center mt-2\">\n                    <CatImage id={theCat.id} url={theCat.url} onClick={nextKitty} dimensions={{ cx: \"500px\", cy: \"500px\" }} />\n                </Col>\n            </Row>\n            <Row className=\"mt-3\">\n                <Col>\n                    <VoteButtons id={theCat.id} onSuccess={nextKitty} />\n                </Col>\n            </Row>\n            <Row >\n                <h2>Click on the image to select a random next image</h2>\n            </Row>\n        </>\n    );\n}\n\nexport default VoteTab;","import React, { useState, useEffect, useRef } from \"react\";\nimport { Form, Row, Image } from \"react-bootstrap\";\nimport CatApiService from \"../app/services/CatApiService\";\nimport CatImage from \"../components/CatImage\";\nimport Spinner from '../assets/spinner.gif';\n\nconst loadBreeds = async () => {\n    const result = await CatApiService.getBreeds();\n    const data = result.data.map((elem) => {\n        return {\n            id: elem.id,\n            name: elem.name\n        }\n    });\n    return data;\n}\n\nconst loadSearch = async (breedId) => {\n    const ord = \"rand\"; //breedId === \"\" ? \"rand\" : \"asc\";\n    const result = await CatApiService.searchCats({ breedId: breedId, order: ord });\n    const data = result.data.map((elem) => {\n        return {\n            id: elem.id,\n            url: elem.url\n        }\n    });\n    return data;\n}\n\nconst SearchTab = () => {\n    const [breeds, setBreeds] = useState([]);\n    const breedRef = useRef();\n    const [lastSearch, setLastSearch] = useState([]);\n    const [searchCount, setSearchCount] = useState(0);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        loadBreeds()\n            .then((data) => setBreeds(data))\n            .then(() => doSearch(breedRef.current.value));\n    }, []);\n\n    const doSearch = async () => {\n        setIsLoading(true);\n        loadSearch(breedRef.current.value)\n            .then((data) => {\n                setSearchCount(data.length);\n                /* organise the data into nested array here will make it easier to render */\n                let gridData = [];\n                let currRow = [];\n                for (let i = 0; i < data.length; i++) {\n                    if (i % 3 === 0 && i !== 0) {\n                        gridData.push(currRow);\n                        currRow = [];\n                    }\n                    currRow.push(data[i]);\n                }\n                /* push the last row on */\n                if (currRow.length > 0) {\n                    gridData.push(currRow);\n                }\n                setLastSearch(gridData)\n                setIsLoading(false);\n            });\n    }\n\n    const breedsOptions = breeds.map((elem) => {\n        return (<option key={elem.id} value={elem.id}>{elem.name}</option>)\n    });\n\n    const breedChanged = () => {\n        doSearch()\n    }\n\n    return (\n        <>\n            <Row>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Breed</Form.Label>\n                        <Form.Select ref={breedRef} onChange={breedChanged}>\n                            <option value=\"\">All</option>\n                            {breedsOptions}\n                        </Form.Select>\n                        <Form.Text>Change selection to see a specific breed</Form.Text>\n                    </Form.Group>\n                </Form>\n            </Row>\n            <Row className=\"justify-content-md-center\">\n                <Image src={Spinner} style={{ display: isLoading ? \"block\" : \"none\", height: \"125px\", width: \"125px\" }} />\n                <table className=\"table\" style={{ width: \"auto\", display: !isLoading ? \"block\" : \"none\" }}>\n                    <tbody>\n                        {lastSearch.map((elem) => {\n                            return (\n                                <tr key={elem.reduce((x, y) => x.id + y.id, \"\")}>{\n                                    elem.map((item) => {\n                                        return (\n                                            <td key={item.id}>\n                                                <CatImage id={item.id} url={item.url} dimensions={{ cx: \"150px\", cy: \"150px\" }} />\n                                            </td>\n                                        )\n                                    })\n                                }\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n                <div>\n                    <p>Total: {searchCount}</p>\n                </div>\n            </Row>\n        </>\n    )\n}\n\nexport default SearchTab;","import './App.scss';\nimport { Container, Row, Col, Button, Tabs, Tab } from 'react-bootstrap';\nimport useToggle from './utilities/useToggle';\n\nimport UploadModal from './components/UploadModal';\nimport VoteTab from './tabs/VoteTab';\nimport SearchTab from './tabs/SearchTab';\n\nfunction App() {\n  const [isOpen, open, close] = useToggle(false);\n\n\n  return (\n    <Container className=\"App text-center\">\n      <Row >\n        <Col className=\"align-self-center\"><h2>This is a work in progress.</h2></Col>\n      </Row>\n      <Row>\n        <Tabs mountOnEnter={true}>\n          <Tab eventKey=\"vote\" title=\"Vote\">\n            <VoteTab />\n          </Tab>\n          <Tab eventKey=\"search\" title=\"Search\">\n            <SearchTab />\n          </Tab>\n        </Tabs>\n      </Row>\n      <Row className='justify-content-md-center'>\n        <hr />\n        <Col>\n          <Button onClick={open}>Upload a Image</Button>\n        </Col>\n        <UploadModal isOpen={isOpen} onClose={close} />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n\n/*\n<div onClick={nextKitty} style={{ height: \"500px\", width: \"500px\", marginLeft: \"auto\", marginRight: \"auto\" }}>\n<img src='/spinner.gif' style={{ display: !isLoading ? \"none\" : \"block\", margin: \"auto\" }} />\n<img src={theCat.url} style={{\n  display: isLoading ? \"none\" : \"block\",\n  maxHeight: \"500px\", maxWidth: \"500px\", cursor: \"pointer\", border: \"solid 1px #CDCDCD\",\n  boxShadow: \"5px 5px 5px #1a1a1a\",\n  marginLeft: \"auto\", marginRight: \"auto\"\n}} onLoad={() => { setIsLoading(false) }} />\n</div>\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}